{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n\n_s(useLocalStorage, \"5hTcIUUhXmZZwkA5OW+zhuKtKjI=\");","map":{"version":3,"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","log","setValue","value","valueToStore","Function","setItem","stringify"],"sources":["C:/Users/rohit/Desktop/portfolio/src/hooks/useLocalStorage.js"],"sourcesContent":["import {useState} from \"react\";\n\nexport const useLocalStorage = (key, initialValue) => {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;EAAA;;EACpD;EACA;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMM,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BP,GAA5B,CAAb,CAFE,CAGF;;MACA,OAAOI,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBH,YAAjC;IACD,CALD,CAKE,OAAOS,KAAP,EAAc;MACd;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACA,OAAOT,YAAP;IACD;EACF,CAX6C,CAA9C,CAHoD,CAgBpD;EACA;;EACA,MAAMY,QAAQ,GAAGC,KAAK,IAAI;IACxB,IAAI;MACF;MACA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACZ,WAAD,CAAjC,GAAiDY,KADnD,CAFE,CAIF;;MACAX,cAAc,CAACY,YAAD,CAAd,CALE,CAMF;;MACAV,MAAM,CAACC,YAAP,CAAoBW,OAApB,CAA4BjB,GAA5B,EAAiCQ,IAAI,CAACU,SAAL,CAAeH,YAAf,CAAjC;IACD,CARD,CAQE,OAAOL,KAAP,EAAc;MACd;MACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACD;EACF,CAbD;;EAeA,OAAO,CAACR,WAAD,EAAcW,QAAd,CAAP;AACD,CAlCM;;GAAMd,e"},"metadata":{},"sourceType":"module"}